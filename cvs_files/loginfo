# The "loginfo" file controls where "cvs commit" log information
# is sent.  The first entry on a line is a regular expression which must match
# the directory that the change is being made to, relative to the
# $CVSROOT.  If a match is found, then the remainder of the line is a filter
# program that should expect log information on its standard input.
#
# If the repository name does not match any of the regular expressions in this
# file, the "DEFAULT" line is used, if it is specified.
#
# If the name ALL appears as a regular expression it is always used
# in addition to the first matching regex or DEFAULT.
#
# You may specify a format string as part of the
# filter.  The string is composed of a `%' followed
# by a single format character, or followed by a set of format
# characters surrounded by `{' and `}' as separators.  The format
# characters are:
#
#   s = file name
#   V = old version number (pre-checkin)
#   v = new version number (post-checkin)
#
# For example:
#DEFAULT (echo ""; id; echo %s; date; cat) >> $CVSROOT/CVSROOT/commitlog
# or
#DEFAULT (echo ""; id; echo %{sVv}; date; cat) >> $CVSROOT/CVSROOT/commitlog
ALL $CVSROOT/CVSROOT/cilogupdate %p %{sv}

############## THE FOLLOWING COMMENTS ARE FROM CVS 1.12.13 ##################
# If any format strings are present in the filter, they will be replaced
# as follows:
#    %c = canonical name of the command being executed
#    %R = the name of the referrer, if any, otherwise the value NONE
#    %p = path relative to repository
#    %r = repository (path portion of $CVSROOT)
#    %{sVv} = attribute list = file name, old version number (pre-checkin),
#           new version number (post-checkin).  When either old or new revision
#           is unknown, doesn't exist, or isn't applicable, the string "NONE"
#           will be placed on the command line instead.
##############################################################################
# Note that %{sVv} is a list operator and not all elements are necessary.
# Thus %{sv} is a legal format string, but will only be replaced with
# file name and new revision.
# It also generates multiple arguments for each file being operated upon.
# That is, if two files, file1 & file2, are being commited from 1.1 to
# version 1.1.2.1 and from 1.1.2.2 to 1.1.2.3, respectively, %{sVv} will
# generate the following six arguments in this order:
# file1, 1.1, 1.1.2.1, file2, 1.1.2.2, 1.1.2.3.
##############################################################################